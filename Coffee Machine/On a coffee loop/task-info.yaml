type: edu
custom_name: stage5
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                     ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: machine/coffee_machine.py
  visible: true
  text: "# Write your code here\n# At the moment, the coffee machine has $550, 400\
    \ ml of water, 540 ml of milk, 120 g of coffee beans, and 9 disposable cups.\n\
    # Global variables\nmoney_in_machine = 550\nwater_in_machine = 400\nmilk_in_machine\
    \ = 540\nbeans_in_machine = 120\ncups_in_machine = 9\n\n\ndef make_one_espresso():\n\
    \    global water_in_machine\n    global beans_in_machine\n    global money_in_machine\n\
    \    global cups_in_machine\n\n    water_in_machine -= 250\n    beans_in_machine\
    \ -= 16\n    money_in_machine += 4\n    cups_in_machine -= 1\n\n\ndef make_one_latte():\n\
    \    global water_in_machine\n    global milk_in_machine\n    global beans_in_machine\n\
    \    global money_in_machine\n    global cups_in_machine\n\n    water_in_machine\
    \ -= 350\n    milk_in_machine -= 75\n    beans_in_machine -= 20\n    money_in_machine\
    \ += 7\n    cups_in_machine -= 1\n\n\ndef make_one_cappuccino():\n    global water_in_machine\n\
    \    global milk_in_machine\n    global beans_in_machine\n    global money_in_machine\n\
    \    global cups_in_machine\n\n    water_in_machine -= 200\n    milk_in_machine\
    \ -= 100\n    beans_in_machine -= 12\n    money_in_machine += 6\n    cups_in_machine\
    \ -= 1\n\n\ndef fill_machine():\n    print(\"How much water, milk, coffee and\
    \ how many disposable cups do you want to add into the coffee machine?\")\n  \
    \  filling_water = abs(int(input(\"Water amount (ml): \")))\n    filling_milk\
    \ = abs(int(input(\"Milk amount (ml): \")))\n    filling_coffee = abs(int(input(\"\
    Coffee amount (g): \")))\n    filling_cups = abs(int(input(\"Cup amount: \")))\n\
    \n    global water_in_machine\n    global milk_in_machine\n    global beans_in_machine\n\
    \    global cups_in_machine\n\n    water_in_machine += filling_water\n    milk_in_machine\
    \ += filling_milk\n    beans_in_machine += filling_coffee\n    cups_in_machine\
    \ += filling_cups\n    \n    coffee_machine_status()\n\ndef buy_from_machine():\n\
    \    buy_option = abs(int(input(\"What do you want to buy? 1 - espresso, 2 - latte,\
    \ 3 - cappuccino: \")))\n    if buy_option == 1:\n        make_one_espresso()\n\
    \    elif buy_option == 2:\n        make_one_latte()\n    elif buy_option == 3:\n\
    \        make_one_cappuccino()\n    else:\n        print(\"Incorrect input\")\n\
    \        \n    coffee_machine_status()\n\ndef withdrawl_from_register():\n   \
    \ global money_in_machine\n\n    money_in_machine = 0\n    \n    coffee_machine_status()\n\
    \ndef coffee_machine_status():\n    global water_in_machine\n    global milk_in_machine\n\
    \    global beans_in_machine\n    global money_in_machine\n    global cups_in_machine\n\
    \n    print(\"The coffee machine has:\")\n    print(str(water_in_machine) + \"\
    \ of water\")\n    print(str(milk_in_machine) + \" of milk\")\n    print(str(beans_in_machine)\
    \ + \" of coffee beans\")\n    print(str(cups_in_machine) + \" of disposable cups\"\
    )\n    print(str(money_in_machine) + \" of money\\n\\n\")\n\n\ncoffee_machine_status()\n\
    machine_action = str(input(\"Write action (buy, fill, take): \"))\nif machine_action\
    \ == \"buy\":\n    buy_from_machine()\nelif machine_action == \"fill\":\n    fill_machine()\n\
    elif machine_action == \"take\":\n    withdrawl_from_register()\nelse:\n    print(\"\
    \\n\\nPlease choose from one of the actions provided (buy, fill, take)\\n\\n\"\
    )"
  learner_created: false
feedback_link: https://hyperskill.org/projects/68/stages/370/implement
status: Solved
record: 5
